oi1.cpp:

// O(n)
// O(1) < O(log(n)) < O(n) < O(n*log(n)) < O(n*n)
// O(n*m) + O(n*log(n))

/*
5 7 3
k[i]1 1 2 3 3 4 5
5
4
0

3
1
0

1 1 1 1 1 1 1
0 0 1 1 1 1 1
0 0 0 1 1 1 1
0 0 0 0 0 1 1
0 0 0 0 0 0 1

res
 i:     0, 1, 2, 3, 4, 5, 6, 7
 dp[i]: 0, 1, 1, 2, 1, 3, 4, 4
 k[i]:  1, 1, 2, 3, 3, 4, 5
 3
 0
dp[i] = 0;
dp[i+1] =  f(i, dp[i], k[i])
dp[i+1]?
dp[i]
dp[i+1] : dp[i] || dp[i-1] : dp[i]
*/

uravnotezen.cpp:

/*
vecotr<int> a[] = [0 3 0 0 2];
int l = 0,1,2,3;
int r = 0,1,2,3,4;
int razlika = r-l +1;
int sum = 0+3+0-0;
int res = 1+1+1;
int f(int l,int r){


}
INT_MAX

5 = 2.5*2 = 5
*/